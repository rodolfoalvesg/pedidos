// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"sync"
	"user-api/app/domain/entities"
)

// Ensure, that UserRepositoryMock does implement entities.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ entities.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of entities.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked entities.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CreateUserFunc: func(ctx context.Context, user *entities.User) error {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(ctx context.Context, userID uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetAllUsersFunc: func(ctx context.Context) ([]*entities.User, error) {
//				panic("mock out the GetAllUsers method")
//			},
//			GetUserByIDFunc: func(ctx context.Context, id uuid.UUID) (*entities.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			UpdateUserFunc: func(ctx context.Context, user *entities.User) error {
//				panic("mock out the UpdateUser method")
//			},
//			UserExistsFunc: func(ctx context.Context, user *entities.User) error {
//				panic("mock out the UserExists method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires entities.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user *entities.User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, userID uuid.UUID) error

	// GetAllUsersFunc mocks the GetAllUsers method.
	GetAllUsersFunc func(ctx context.Context) ([]*entities.User, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id uuid.UUID) (*entities.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, user *entities.User) error

	// UserExistsFunc mocks the UserExists method.
	UserExistsFunc func(ctx context.Context, user *entities.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entities.User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// GetAllUsers holds details about calls to the GetAllUsers method.
		GetAllUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entities.User
		}
		// UserExists holds details about calls to the UserExists method.
		UserExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entities.User
		}
	}
	lockCreateUser  sync.RWMutex
	lockDeleteUser  sync.RWMutex
	lockGetAllUsers sync.RWMutex
	lockGetUserByID sync.RWMutex
	lockUpdateUser  sync.RWMutex
	lockUserExists  sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserRepositoryMock) CreateUser(ctx context.Context, user *entities.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserRepositoryMock.CreateUserFunc: method is nil but UserRepository.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRepository.CreateUserCalls())
func (mock *UserRepositoryMock) CreateUserCalls() []struct {
	Ctx  context.Context
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entities.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserRepositoryMock) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("UserRepositoryMock.DeleteUserFunc: method is nil but UserRepository.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserRepository.DeleteUserCalls())
func (mock *UserRepositoryMock) DeleteUserCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetAllUsers calls GetAllUsersFunc.
func (mock *UserRepositoryMock) GetAllUsers(ctx context.Context) ([]*entities.User, error) {
	if mock.GetAllUsersFunc == nil {
		panic("UserRepositoryMock.GetAllUsersFunc: method is nil but UserRepository.GetAllUsers was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUsers.Lock()
	mock.calls.GetAllUsers = append(mock.calls.GetAllUsers, callInfo)
	mock.lockGetAllUsers.Unlock()
	return mock.GetAllUsersFunc(ctx)
}

// GetAllUsersCalls gets all the calls that were made to GetAllUsers.
// Check the length with:
//
//	len(mockedUserRepository.GetAllUsersCalls())
func (mock *UserRepositoryMock) GetAllUsersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUsers.RLock()
	calls = mock.calls.GetAllUsers
	mock.lockGetAllUsers.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserRepositoryMock) GetUserByID(ctx context.Context, id uuid.UUID) (*entities.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("UserRepositoryMock.GetUserByIDFunc: method is nil but UserRepository.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByIDCalls())
func (mock *UserRepositoryMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserRepositoryMock) UpdateUser(ctx context.Context, user *entities.User) error {
	if mock.UpdateUserFunc == nil {
		panic("UserRepositoryMock.UpdateUserFunc: method is nil but UserRepository.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserRepository.UpdateUserCalls())
func (mock *UserRepositoryMock) UpdateUserCalls() []struct {
	Ctx  context.Context
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entities.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}

// UserExists calls UserExistsFunc.
func (mock *UserRepositoryMock) UserExists(ctx context.Context, user *entities.User) error {
	if mock.UserExistsFunc == nil {
		panic("UserRepositoryMock.UserExistsFunc: method is nil but UserRepository.UserExists was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUserExists.Lock()
	mock.calls.UserExists = append(mock.calls.UserExists, callInfo)
	mock.lockUserExists.Unlock()
	return mock.UserExistsFunc(ctx, user)
}

// UserExistsCalls gets all the calls that were made to UserExists.
// Check the length with:
//
//	len(mockedUserRepository.UserExistsCalls())
func (mock *UserRepositoryMock) UserExistsCalls() []struct {
	Ctx  context.Context
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entities.User
	}
	mock.lockUserExists.RLock()
	calls = mock.calls.UserExists
	mock.lockUserExists.RUnlock()
	return calls
}

// Ensure, that UserRDBRepositoryMock does implement entities.UserRDBRepository.
// If this is not the case, regenerate this file with moq.
var _ entities.UserRDBRepository = &UserRDBRepositoryMock{}

// UserRDBRepositoryMock is a mock implementation of entities.UserRDBRepository.
//
//	func TestSomethingThatUsesUserRDBRepository(t *testing.T) {
//
//		// make and configure a mocked entities.UserRDBRepository
//		mockedUserRDBRepository := &UserRDBRepositoryMock{
//			DeleteUserFunc: func(ctx context.Context, userID string) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUserFunc: func(ctx context.Context, id string) (*entities.User, error) {
//				panic("mock out the GetUser method")
//			},
//			SetUserFunc: func(ctx context.Context, user *entities.User) error {
//				panic("mock out the SetUser method")
//			},
//		}
//
//		// use mockedUserRDBRepository in code that requires entities.UserRDBRepository
//		// and then make assertions.
//
//	}
type UserRDBRepositoryMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, userID string) error

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, id string) (*entities.User, error)

	// SetUserFunc mocks the SetUser method.
	SetUserFunc func(ctx context.Context, user *entities.User) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// SetUser holds details about calls to the SetUser method.
		SetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entities.User
		}
	}
	lockDeleteUser sync.RWMutex
	lockGetUser    sync.RWMutex
	lockSetUser    sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserRDBRepositoryMock) DeleteUser(ctx context.Context, userID string) error {
	if mock.DeleteUserFunc == nil {
		panic("UserRDBRepositoryMock.DeleteUserFunc: method is nil but UserRDBRepository.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserRDBRepository.DeleteUserCalls())
func (mock *UserRDBRepositoryMock) DeleteUserCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *UserRDBRepositoryMock) GetUser(ctx context.Context, id string) (*entities.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserRDBRepositoryMock.GetUserFunc: method is nil but UserRDBRepository.GetUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, id)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserRDBRepository.GetUserCalls())
func (mock *UserRDBRepositoryMock) GetUserCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// SetUser calls SetUserFunc.
func (mock *UserRDBRepositoryMock) SetUser(ctx context.Context, user *entities.User) error {
	if mock.SetUserFunc == nil {
		panic("UserRDBRepositoryMock.SetUserFunc: method is nil but UserRDBRepository.SetUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSetUser.Lock()
	mock.calls.SetUser = append(mock.calls.SetUser, callInfo)
	mock.lockSetUser.Unlock()
	return mock.SetUserFunc(ctx, user)
}

// SetUserCalls gets all the calls that were made to SetUser.
// Check the length with:
//
//	len(mockedUserRDBRepository.SetUserCalls())
func (mock *UserRDBRepositoryMock) SetUserCalls() []struct {
	Ctx  context.Context
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entities.User
	}
	mock.lockSetUser.RLock()
	calls = mock.calls.SetUser
	mock.lockSetUser.RUnlock()
	return calls
}

// Ensure, that UserElasticRepositoryMock does implement entities.UserElasticRepository.
// If this is not the case, regenerate this file with moq.
var _ entities.UserElasticRepository = &UserElasticRepositoryMock{}

// UserElasticRepositoryMock is a mock implementation of entities.UserElasticRepository.
//
//	func TestSomethingThatUsesUserElasticRepository(t *testing.T) {
//
//		// make and configure a mocked entities.UserElasticRepository
//		mockedUserElasticRepository := &UserElasticRepositoryMock{
//			DeleteUserFunc: func(ctx context.Context, publicID uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUsersIndexFunc: func(ctx context.Context, filter *entities.UserFilter) ([]*entities.User, error) {
//				panic("mock out the GetUsersIndex method")
//			},
//			UpdateUserFunc: func(ctx context.Context, user *entities.User) error {
//				panic("mock out the UpdateUser method")
//			},
//			UserIndexFunc: func(ctx context.Context, name string, user *entities.User) error {
//				panic("mock out the UserIndex method")
//			},
//		}
//
//		// use mockedUserElasticRepository in code that requires entities.UserElasticRepository
//		// and then make assertions.
//
//	}
type UserElasticRepositoryMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, publicID uuid.UUID) error

	// GetUsersIndexFunc mocks the GetUsersIndex method.
	GetUsersIndexFunc func(ctx context.Context, filter *entities.UserFilter) ([]*entities.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, user *entities.User) error

	// UserIndexFunc mocks the UserIndex method.
	UserIndexFunc func(ctx context.Context, name string, user *entities.User) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PublicID is the publicID argument value.
			PublicID uuid.UUID
		}
		// GetUsersIndex holds details about calls to the GetUsersIndex method.
		GetUsersIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *entities.UserFilter
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entities.User
		}
		// UserIndex holds details about calls to the UserIndex method.
		UserIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// User is the user argument value.
			User *entities.User
		}
	}
	lockDeleteUser    sync.RWMutex
	lockGetUsersIndex sync.RWMutex
	lockUpdateUser    sync.RWMutex
	lockUserIndex     sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserElasticRepositoryMock) DeleteUser(ctx context.Context, publicID uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("UserElasticRepositoryMock.DeleteUserFunc: method is nil but UserElasticRepository.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PublicID uuid.UUID
	}{
		Ctx:      ctx,
		PublicID: publicID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, publicID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserElasticRepository.DeleteUserCalls())
func (mock *UserElasticRepositoryMock) DeleteUserCalls() []struct {
	Ctx      context.Context
	PublicID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PublicID uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUsersIndex calls GetUsersIndexFunc.
func (mock *UserElasticRepositoryMock) GetUsersIndex(ctx context.Context, filter *entities.UserFilter) ([]*entities.User, error) {
	if mock.GetUsersIndexFunc == nil {
		panic("UserElasticRepositoryMock.GetUsersIndexFunc: method is nil but UserElasticRepository.GetUsersIndex was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *entities.UserFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetUsersIndex.Lock()
	mock.calls.GetUsersIndex = append(mock.calls.GetUsersIndex, callInfo)
	mock.lockGetUsersIndex.Unlock()
	return mock.GetUsersIndexFunc(ctx, filter)
}

// GetUsersIndexCalls gets all the calls that were made to GetUsersIndex.
// Check the length with:
//
//	len(mockedUserElasticRepository.GetUsersIndexCalls())
func (mock *UserElasticRepositoryMock) GetUsersIndexCalls() []struct {
	Ctx    context.Context
	Filter *entities.UserFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter *entities.UserFilter
	}
	mock.lockGetUsersIndex.RLock()
	calls = mock.calls.GetUsersIndex
	mock.lockGetUsersIndex.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserElasticRepositoryMock) UpdateUser(ctx context.Context, user *entities.User) error {
	if mock.UpdateUserFunc == nil {
		panic("UserElasticRepositoryMock.UpdateUserFunc: method is nil but UserElasticRepository.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserElasticRepository.UpdateUserCalls())
func (mock *UserElasticRepositoryMock) UpdateUserCalls() []struct {
	Ctx  context.Context
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entities.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}

// UserIndex calls UserIndexFunc.
func (mock *UserElasticRepositoryMock) UserIndex(ctx context.Context, name string, user *entities.User) error {
	if mock.UserIndexFunc == nil {
		panic("UserElasticRepositoryMock.UserIndexFunc: method is nil but UserElasticRepository.UserIndex was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		User *entities.User
	}{
		Ctx:  ctx,
		Name: name,
		User: user,
	}
	mock.lockUserIndex.Lock()
	mock.calls.UserIndex = append(mock.calls.UserIndex, callInfo)
	mock.lockUserIndex.Unlock()
	return mock.UserIndexFunc(ctx, name, user)
}

// UserIndexCalls gets all the calls that were made to UserIndex.
// Check the length with:
//
//	len(mockedUserElasticRepository.UserIndexCalls())
func (mock *UserElasticRepositoryMock) UserIndexCalls() []struct {
	Ctx  context.Context
	Name string
	User *entities.User
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		User *entities.User
	}
	mock.lockUserIndex.RLock()
	calls = mock.calls.UserIndex
	mock.lockUserIndex.RUnlock()
	return calls
}
